This directory contains a test suite for the MariaDB daemon. To run
the currently existing test cases, execute ./mysql-test-run in
this directory.

For use in Red Hat distributions, you should run the script as user mysql,
who is created with nologin shell however, so the best bet is something like
       $ su -
       # cd /usr/share/mysql-test
       # su -s /bin/bash mysql -c "./mysql-test-run --skip-test-list=rh-skipped-tests.list"

This will use the installed mysql executables, but will run a private copy
of the server process (using data files within /usr/share/mysql-test),
so you need not start the mysqld service beforehand.

The "--skip-test-list=rh-skipped-tests.list" option excludes tests that are
known to fail on one or more Red-Hat-supported platforms.  You can omit it
if you want to check whether such failures occur for you.  Documentation
about the reasons for omitting such tests can be found in the file
rh-skipped-tests.list.

To clean up afterwards, remove the created "var" subdirectory, eg
       # su -s /bin/bash - mysql -c "rm -rf /usr/share/mysql-test/var"

If one or more tests fail on your system, please read the following manual
section for instructions on how to report the problem:

http://kb.askmonty.org/v/reporting-bugs

If you want to use an already running MySQL server for specific tests,
use the --extern option to mysql-test-run. Please note that in this mode,
the test suite expects you to provide the names of the tests to run.
For example, here is the command to run the "alias" and "analyze" tests
with an external server:

mysql-test-run --extern socket=/tmp/mysql.sock alias analyze

To match your setup, you might also need to provide --socket, --user, and
other relevant options.

With no test cases named on the command line, mysql-test-run falls back
to the normal "non-extern" behavior. The reason for this is that some
tests cannot run with an external server (because they need to control the
options with which the server is started).

You can create your own test cases. To create a test case, create a new
file in the t subdirectory using a text editor. The file should have a .test
extension. For example:

 xemacs t/test_case_name.test

 In the file, put a set of SQL statements that create some tables,
 load test data, and run some queries to manipulate it.

 We would appreciate it if you name your test tables t1, t2, t3 ... (to not
 conflict too much with existing tables).

 Your test should begin by dropping the tables you are going to create and
 end by dropping them again.  This ensures that you can run the test over
 and over again.
 
 If you are using mysqltest commands (like result file names) in your
 test case, you should create the result file as follows:

 mysql-test-run --record test_case_name

 or

 mysqltest --record < t/test_case_name.test

 If you only have a simple test cases consisting of SQL statements and
 comments, you can create the test case in one of the following ways:

 mysql-test-run --record test_case_name

 mysql test < t/test_case_name.test > r/test_case_name.result

 mysqltest --record --database test --result-file=r/test_case_name.result < t/test_case_name.test

 When this is done, take a look at r/test_case_name.result
 - If the result is incorrect, you have found a bug. In this case, you should
   edit the test result to the correct results so that we can verify
   that the bug is corrected in future releases.

If you want to submit your test case you can send it 
to maria-developers@lists.launchpad.com or attach it to a bug report on
http://mariadb.org/jira/.

If the test case is really big or if it contains 'not public' data,
then put your .test file and .result file(s) into a tar.gz archive,
add a README that explains the problem, ftp the archive to
ftp://ftp.askmonty.org/private and submit a report to
http://mariadb.org/jira about it.
